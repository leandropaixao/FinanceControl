@page "/accounts/register"
@page "/accounts/edit/{Id:guid}"
@inherits LayoutComponentBase

@using FinanceControl.Web.Models
@using FinanceControl.Web.Services.Accounts
@inject ISnackbar Snackbar
@inject IAccountsService<Account> AccountsService

<EditForm Model="@AccountData" OnSubmit="@Register">
    <DataAnnotationsValidator />
    <MudContainer Class="mt-2" MaxWidth="MaxWidth.Large">
        <MudGrid Class="mt-2">
            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.h5" GutterBottom="true">Account register</MudText>
            </MudItem>
        </MudGrid>
        <MudGrid Class="mt-1">
            <MudItem xs="12" sm="6">
                <MudCheckBox @bind-Value="AccountData.Active" Label="Active" Color="Color.Primary"></MudCheckBox>
            </MudItem>
        </MudGrid>
        <MudGrid Class="mt-1">
            <MudItem xs="12" sm="6">
                <MudTextField T="string" Label="Description" @bind-Value="AccountData.Description"
                              ReadOnly="@AccountData.Movimented"
                              AutoFocus="true" For="@(() => AccountData.Description)" />

            </MudItem>
        </MudGrid>
        <MudGrid Class="mt-1">
            <MudItem xs="12" sm="6">
                <MudTextField Label="Opening Balance" Adornment="Adornment.Start"
                              ReadOnly="@AccountData.Movimented"
                              AdornmentIcon="@Icons.Material.Filled.AttachMoney" Format="F2"
                              @bind-Value="AccountData.InitialBalance" For="@(() => AccountData.InitialBalance)" />
            </MudItem>
        </MudGrid>

        @if (AccountData.RegisterDate != null || AccountData.ModificationDate != null)
        {
            <MudGrid Class="mt-1">
                @if (AccountData.RegisterDate != null)
                {
                    <MudItem xs="12" sm="6">
                        <MudTextField T="DateTime?" Format="yyyy-MM-dd HH:mm:ss" Label="Register Date" ReadOnly="true"
                                      @bind-Value="@_localDateRegister" />
                    </MudItem>
                }
                @if (AccountData.ModificationDate != null)
                {
                    <MudItem xs="12" sm="6">
                        <MudTextField T="DateTime?" Format="yyyy-MM-dd HH:mm:ss" Label="Change Date" ReadOnly="true"
                                      @bind-Value="@_localDateModification" />
                    </MudItem>
                }
            </MudGrid>
        }

        <MudGrid Spacing="2" Class="mt-1">
            <MudItem xs="8" Class="justify-left">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Save" DropShadow="false"
                           Disabled="@AccountData.Movimented"
                           Color="Color.Tertiary" Class="mt-4">Save</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" DropShadow="false"
                           OnClick="() => Cancel()"
                           Color="Color.Secondary" Class="mt-4">Cancel</MudButton>
            </MudItem>
        </MudGrid>

    </MudContainer>
</EditForm>

@code {
    [Parameter] public Guid Id { get; set; }
    [Inject] NavigationManager? NavigationManager { get; set; }

    protected Account AccountData { get; set; } = new();
    private DateTime? _localDateRegister, _localDateModification;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var account = await AccountsService.SearchByIdAsync(Id);
        if (account != null)
        {
            AccountData = account;
            if (AccountData.RegisterDate.HasValue)
            {
                _localDateRegister = ConvertToLocalTime(AccountData.RegisterDate.Value);
            }
            if (AccountData.ModificationDate.HasValue)
            {
                _localDateModification = ConvertToLocalTime(AccountData.ModificationDate.Value);
            }
        }
    }

    private DateTime ConvertToLocalTime(DateTime utcDate)
        => TimeZoneInfo.ConvertTimeFromUtc(utcDate, TimeZoneInfo.Local);

    void Cancel() => NavigationManager?.NavigateTo("/accounts/list");

    void Register(EditContext editContext)
    {
        if (!editContext.Validate())
        {
            return;
        }
        if (Id == Guid.Empty)
        {
            AccountsService.NewAsync(AccountData);
        }
        else
        {
            AccountsService.EditAsync(AccountData);
        }
        Snackbar.Add("Record saved", Severity.Success);
        NavigationManager?.NavigateTo("/accounts/list");
    }
}